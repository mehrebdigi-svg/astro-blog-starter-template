---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE } from '../consts';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`Calculator - ${SITE_TITLE}`} description="A simple calculator application" />
		<style>
			.calculator-container {
				max-width: 400px;
				margin: 2rem auto;
				padding: 2rem;
			}

			.calculator {
				background: #f5f5f5;
				border-radius: 10px;
				padding: 20px;
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			}

			.display {
				background: #fff;
				border: 2px solid #ddd;
				border-radius: 5px;
				padding: 20px;
				margin-bottom: 20px;
				font-size: 2rem;
				text-align: right;
				min-height: 60px;
				word-wrap: break-word;
				font-family: 'Courier New', monospace;
			}

			.buttons {
				display: grid;
				grid-template-columns: repeat(4, 1fr);
				gap: 10px;
			}

			button {
				padding: 20px;
				font-size: 1.2rem;
				border: none;
				border-radius: 5px;
				background: #fff;
				cursor: pointer;
				transition: all 0.2s;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
			}

			button:hover {
				background: #e0e0e0;
				transform: translateY(-2px);
				box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
			}

			button:active {
				transform: translateY(0);
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
			}

			.operator {
				background: #ff9800;
				color: white;
			}

			.operator:hover {
				background: #f57c00;
			}

			.equals {
				background: #4caf50;
				color: white;
				grid-column: span 2;
			}

			.equals:hover {
				background: #45a049;
			}

			.clear {
				background: #f44336;
				color: white;
			}

			.clear:hover {
				background: #da190b;
			}

			.zero {
				grid-column: span 2;
			}

			h1 {
				text-align: center;
				color: var(--black);
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="calculator-container">
				<h1>Calculator</h1>
				<div class="calculator">
					<div class="display" id="display" role="status" aria-live="polite" aria-label="Calculator display">0</div>
					<div class="buttons">
						<button class="clear" onclick="clearDisplay()" aria-label="Clear calculator">C</button>
						<button class="operator" onclick="appendOperator('/')" aria-label="Divide">/</button>
						<button class="operator" onclick="appendOperator('*')" aria-label="Multiply">Ã—</button>
						<button onclick="appendNumber('7')" aria-label="Number 7">7</button>
						<button onclick="appendNumber('8')" aria-label="Number 8">8</button>
						<button onclick="appendNumber('9')" aria-label="Number 9">9</button>
						<button class="operator" onclick="appendOperator('-')" aria-label="Subtract">-</button>
						<button onclick="appendNumber('4')" aria-label="Number 4">4</button>
						<button onclick="appendNumber('5')" aria-label="Number 5">5</button>
						<button onclick="appendNumber('6')" aria-label="Number 6">6</button>
						<button class="operator" onclick="appendOperator('+')" aria-label="Add">+</button>
						<button onclick="appendNumber('1')" aria-label="Number 1">1</button>
						<button onclick="appendNumber('2')" aria-label="Number 2">2</button>
						<button onclick="appendNumber('3')" aria-label="Number 3">3</button>
						<button class="equals" onclick="calculate()" aria-label="Calculate result">=</button>
						<button class="zero" onclick="appendNumber('0')" aria-label="Number 0">0</button>
						<button onclick="appendDecimal()" aria-label="Decimal point">.</button>
					</div>
				</div>
			</div>
		</main>
		<Footer />
		
		<script is:inline>
			let currentInput = '0';
			let operator = null;
			let previousInput = null;
			let shouldResetDisplay = false;

			function updateDisplay() {
				const display = document.getElementById('display');
				if (display) {
					display.textContent = currentInput;
				}
			}

			function clearDisplay() {
				currentInput = '0';
				operator = null;
				previousInput = null;
				shouldResetDisplay = false;
				updateDisplay();
			}

			function appendNumber(num) {
				if (currentInput === 'Error' || shouldResetDisplay) {
					currentInput = num;
					shouldResetDisplay = false;
				} else {
					currentInput = currentInput === '0' ? num : currentInput + num;
				}
				updateDisplay();
			}

			function appendDecimal() {
				if (currentInput === 'Error' || shouldResetDisplay) {
					currentInput = '0.';
					shouldResetDisplay = false;
				} else if (!currentInput.includes('.')) {
					currentInput += '.';
				}
				updateDisplay();
			}

			function appendOperator(op) {
				if (currentInput === 'Error') {
					return;
				}
				if (operator !== null && previousInput !== null && !shouldResetDisplay) {
					calculate();
				}
				operator = op;
				previousInput = currentInput;
				shouldResetDisplay = true;
			}

			function calculate() {
				if (operator === null || previousInput === null) {
					return;
				}

				const prev = parseFloat(previousInput);
				const current = parseFloat(currentInput);
				let result;

				switch (operator) {
					case '+':
						result = prev + current;
						break;
					case '-':
						result = prev - current;
						break;
					case '*':
						result = prev * current;
						break;
					case '/':
						if (current === 0) {
							currentInput = 'Error';
							operator = null;
							previousInput = null;
							shouldResetDisplay = true;
							updateDisplay();
							return;
						}
						result = prev / current;
						break;
					default:
						return;
				}

				// Format result to avoid very long decimals
				const resultStr = result.toString();
				if (resultStr.includes('.') && resultStr.split('.')[1].length > 8) {
					currentInput = result.toFixed(8).replace(/\.?0+$/, '');
				} else {
					currentInput = resultStr;
				}
				
				operator = null;
				previousInput = null;
				shouldResetDisplay = true;
				updateDisplay();
			}

			// Keyboard support
			document.addEventListener('keydown', function(event) {
				const key = event.key;
				
				if (key >= '0' && key <= '9') {
					appendNumber(key);
				} else if (key === '.') {
					appendDecimal();
				} else if (key === '+' || key === '-' || key === '*' || key === '/') {
					appendOperator(key);
				} else if (key === 'Enter' || key === '=') {
					event.preventDefault();
					calculate();
				} else if (key === 'Escape' || key.toLowerCase() === 'c') {
					clearDisplay();
				} else if (key === 'Backspace') {
					event.preventDefault();
					if (currentInput.length > 1) {
						currentInput = currentInput.slice(0, -1);
					} else {
						currentInput = '0';
					}
					updateDisplay();
				}
			});

			// Initialize display
			updateDisplay();
		</script>
	</body>
</html>
